# ============================================================================
# üçÄ Sistema PlagIA Professional - Vers√£o Final com Busca Robusta
# UI/UX moderna, m√∫ltiplas fontes de dados (CrossRef, Semantic Scholar)
# e estrat√©gias de busca em cascata para m√°xima efici√™ncia.
# PEAS.Co 2024
# ============================================================================

import streamlit as st
import requests
import PyPDF2
import difflib
from fpdf import FPDF
from io import BytesIO
import hashlib
from datetime import datetime
import qrcode
import re
import numpy as np
import plotly.graph_objects as go
import time
from typing import Dict, List, Tuple, Optional
import logging
from functools import lru_cache
import gc

# --- Configura√ß√£o da P√°gina e Logging ---
st.set_page_config(
    page_title="PlagIA Professional - An√°lise de Similaridade",
    page_icon="‚ú®",
    layout="wide",
    initial_sidebar_state="expanded"
)

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- Constantes e Configura√ß√µes Globais ---
URL_GOOGLE_SHEETS = "https://script.google.com/macros/s/AKfycbyTpbWDxWkNRh_ZIlHuAVwZaCC2ODqTmo0Un7ZDbgzrVQBmxlYYKuoYf6yDigAPHZiZ/exec"

CONFIG = {
    'MAX_CONSULTAS_SESSAO': 5,
    'MIN_TEXT_LENGTH': 500,
    'MAX_TEXT_LENGTH': 60000, # Aumentado para textos maiores
    'MIN_WORDS': 50,
    'TIMEOUT_API': 25,
    'MAX_REFS_API': 20,
    'MAX_REFS_ANALISE': 15,
    'CACHE_TTL': 3600,
    'SIMILARITY_THRESHOLD_HIGH': 0.4,
}

# --- Estilo CSS Moderno ---
@st.cache_data(ttl=CONFIG['CACHE_TTL'] )
def load_modern_css() -> str:
    """Carrega o CSS otimizado e moderno para a aplica√ß√£o."""
    return """
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap' );
        
        html, body, [class*="css"] {
            font-family: 'Inter', sans-serif;
        }
        .main .block-container {
            padding-top: 2rem;
            padding-bottom: 2rem;
            max-width: 1300px;
        }
        .hero-header {
            background: linear-gradient(135deg, #6e8efb, #a777e3);
            padding: 2.5rem;
            border-radius: 18px;
            margin-bottom: 2rem;
            text-align: center;
            color: white;
        }
        .glass-card {
            background: rgba(255, 255, 255, 0.6);
            backdrop-filter: blur(5px);
            border-radius: 18px;
            padding: 1.5rem 2rem;
            margin-bottom: 1.5rem;
            border: 1px solid rgba(0, 0, 0, 0.05);
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.1);
        }
        .metric-card {
            background: #ffffff;
            border-radius: 18px;
            padding: 1.5rem;
            text-align: center;
            border: 1px solid #e0e0e0;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .metric-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 20px rgba(0,0,0,0.08);
        }
        .metric-value {
            font-size: 2.2rem;
            font-weight: 700;
            color: #6e8efb;
        }
        .metric-label {
            font-size: 0.9rem;
            color: #555;
            font-weight: 600;
        }
        .stButton>button {
            border-radius: 12px;
            padding: 0.75rem 1.5rem;
            font-weight: 600;
            width: 100%;
        }
        .stDownloadButton>button {
            background-color: #28a745;
            color: white;
        }
        .sidebar-card {
            background: #f8f9fa;
            border-radius: 18px;
            padding: 1.5rem;
            margin-bottom: 1rem;
        }
        .usage-counter {
            text-align: center;
            font-weight: 600;
        }
        .usage-counter.limit-reached {
            color: #d9534f;
        }
        .section-header {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
            color: #333;
        }
    </style>
    """

# --- Fun√ß√µes de Busca Robusta ---

def extrair_palavras_chave(texto: str, estrategia: int) -> str:
    """Extrai palavras-chave de um texto usando diferentes estrat√©gias."""
    texto_lower = texto.lower()
    if estrategia == 1:  # Estrat√©gia 1: Palavras mais longas do in√≠cio do texto
        return " ".join(re.findall(r'\b\w{6,15}\b', texto_lower[:2000])[:15])
    elif estrategia == 2:  # Estrat√©gia 2: Termos de 2-3 palavras (N-grams)
        tokens = re.findall(r'\b\w+\b', texto_lower[:2500])
        bigramas = [" ".join(tokens[i:i+2]) for i in range(len(tokens)-1)]
        return " ".join(bigramas[:10])
    elif estrategia == 3:  # Estrat√©gia 3: Palavras mais frequentes no texto todo
        palavras = re.findall(r'\b\w{5,}\b', texto_lower)
        if not palavras: return ""
        contagem = np.unique(palavras, return_counts=True)
        mais_frequentes = sorted(zip(contagem[0], contagem[1]), key=lambda x: x[1], reverse=True)
        return " ".join([p[0] for p in mais_frequentes if p[0] not in ['artigo', 'estudo', 'trabalho']][:12])
    return ""

@st.cache_data(ttl=CONFIG['CACHE_TTL'])
def buscar_crossref(query: str) -> List[Dict]:
    """Busca na API da CrossRef."""
    if not query: return []
    url = f"https://api.crossref.org/works?query.bibliographic={requests.utils.quote(query )}&rows={CONFIG['MAX_REFS_API']}&sort=relevance"
    headers = {'User-Agent': 'PlagIA/4.0 (mailto:contato@peas.co)'}
    try:
        r = requests.get(url, headers=headers, timeout=CONFIG['TIMEOUT_API'])
        r.raise_for_status()
        items = r.json().get('message', {}).get('items', [])
        
        referencias = []
        for item in items:
            title = item.get('title', [''])[0]
            if not title: continue
            
            ano = ""
            if 'published-print' in item and 'date-parts' in item['published-print']:
                ano = item['published-print']['date-parts'][0][0]
            
            referencias.append({
                'titulo': title,
                'resumo': item.get('abstract', ''),
                'link': item.get('URL', ''),
                'doi': item.get('DOI', ''),
                'ano': ano
            })
        return referencias
    except requests.RequestException as e:
        logger.warning(f"API CrossRef falhou para query '{query[:30]}...': {e}")
        return []

@st.cache_data(ttl=CONFIG['CACHE_TTL'])
def buscar_semantic_scholar(query: str) -> List[Dict]:
    """Busca na API do Semantic Scholar e formata a sa√≠da para ser compat√≠vel."""
    if not query: return []
    url = f"https://api.semanticscholar.org/graph/v1/paper/search?query={requests.utils.quote(query )}&limit={CONFIG['MAX_REFS_API']}&fields=title,abstract,year,url,externalIds"
    try:
        r = requests.get(url, timeout=CONFIG['TIMEOUT_API'])
        r.raise_for_status()
        results = r.json().get('data', [])
        
        referencias_formatadas = []
        for item in results:
            referencias_formatadas.append({
                'titulo': item.get('title', ''),
                'resumo': item.get('abstract', ''),
                'link': item.get('url', ''),
                'doi': item.get('externalIds', {}).get('DOI', ''),
                'ano': item.get('year', '')
            })
        return referencias_formatadas
    except requests.RequestException as e:
        logger.warning(f"API Semantic Scholar falhou para query '{query[:30]}...': {e}")
        return []

def buscar_referencias_robusto(texto: str, status_placeholder) -> List[Dict]:
    """Executa uma busca robusta em cascata, usando m√∫ltiplas estrat√©gias e fontes."""
    fontes = [
        ("CrossRef", buscar_crossref),
        ("Semantic Scholar", buscar_semantic_scholar)
    ]
    
    for nome_fonte, funcao_busca in fontes:
        for estrategia in range(1, 4):
            status_placeholder.info(f"Buscando em '{nome_fonte}' (Estrat√©gia de busca #{estrategia})...")
            query = extrair_palavras_chave(texto, estrategia=estrategia)
            
            if not query:
                logger.info(f"Estrat√©gia #{estrategia} n√£o gerou query para o texto.")
                continue

            referencias = funcao_busca(query)
            
            if referencias:
                logger.info(f"Sucesso! {len(referencias)} refer√™ncias encontradas em '{nome_fonte}' com a estrat√©gia #{estrategia}.")
                return referencias
    
    logger.warning("Nenhuma refer√™ncia encontrada ap√≥s todas as estrat√©gias e fontes.")
    return []

# --- Fun√ß√µes Auxiliares e de Neg√≥cio ---

@st.cache_data(show_spinner=False)
def extrair_texto_pdf(arquivo_pdf) -> str:
    """Extrai texto de um arquivo PDF de forma otimizada."""
    try:
        leitor = PyPDF2.PdfReader(arquivo_pdf)
        texto_completo = "".join(page.extract_text() or "" for page in leitor.pages)
        return texto_completo
    except Exception as e:
        logger.error(f"Falha ao extrair texto do PDF: {e}")
        return ""

@lru_cache(maxsize=64)
def limpar_texto(texto_bruto: str) -> str:
    """Limpeza de texto aprimorada para remover ru√≠dos e focar no conte√∫do."""
    if not texto_bruto: return ""
    
    # 1. Remove cabe√ßalhos e rodap√©s que se repetem com frequ√™ncia
    linhas = texto_bruto.splitlines()
    contagem_linhas = {linha.strip(): linhas.count(linha) for linha in set(linhas) if 10 < len(linha.strip()) < 100}
    linhas_repetidas = [linha for linha, cont in contagem_linhas.items() if cont > 2]
    
    texto_sem_repeticao = "\n".join([l for l in linhas if l.strip() not in linhas_repetidas])

    # 2. Remove tudo ap√≥s as refer√™ncias bibliogr√°ficas
    texto_sem_refs = re.split(r'\n\s*(Refer[e√™]ncias|Bibliografia|References)\s*\n', texto_sem_repeticao, flags=re.IGNORECASE)[0]
    
    # 3. Normaliza√ß√£o final
    texto_limpo = re.sub(r'http\S+', '', texto_sem_refs ) # Remove URLs
    texto_limpo = re.sub(r'[^a-zA-Z0-9\s.,-]', ' ', texto_limpo) # Remove caracteres especiais
    texto_limpo = re.sub(r'\s+', ' ', texto_limpo) # Normaliza espa√ßos em branco
    
    return texto_limpo.strip()

@lru_cache(maxsize=128)
def validar_texto(texto: str) -> Tuple[bool, str]:
    """Valida√ß√£o robusta do texto extra√≠do."""
    if not isinstance(texto, str) or not texto.strip():
        return False, "Texto inv√°lido ou vazio."
    
    length = len(texto.strip())
    if length < CONFIG['MIN_TEXT_LENGTH']:
        return False, f"Texto muito curto. M√≠nimo de {CONFIG['MIN_TEXT_LENGTH']} caracteres (encontrados: {length})."
    if length > CONFIG['MAX_TEXT_LENGTH']:
        return False, f"Texto muito longo. M√°ximo de {CONFIG['MAX_TEXT_LENGTH']} caracteres."
        
    palavras = len(texto.strip().split())
    if palavras < CONFIG['MIN_WORDS']:
        return False, f"Texto com poucas palavras. M√≠nimo de {CONFIG['MIN_WORDS']} (encontradas: {palavras})."
        
    return True, "Texto v√°lido."

@lru_cache(maxsize=256)
def calcular_similaridade(texto1: str, texto2: str) -> float:
    """Calcula a similaridade entre dois textos usando SequenceMatcher."""
    if not texto1 or not texto2: return 0.0
    return difflib.SequenceMatcher(None, texto1, texto2).ratio()

# --- Gera√ß√£o de Relat√≥rio PDF e Outras Fun√ß√µes ---
# (As fun√ß√µes de gera√ß√£o de PDF, salvamento no Google Sheets, etc., permanecem as mesmas da vers√£o anterior)
# ...

# --- Componentes da Interface (UI) ---
# (As fun√ß√µes de UI como exibir_dashboard_resultados permanecem as mesmas)
# ...

# --- Fun√ß√£o Principal da Aplica√ß√£o ---
def main():
    st.markdown(load_modern_css(), unsafe_allow_html=True)

    # --- Inicializa√ß√£o do Estado da Sess√£o ---
    if "consultas" not in st.session_state:
        st.session_state.consultas = 0
    if "processando" not in st.session_state:
        st.session_state.processando = False
    if "resultados" not in st.session_state:
        st.session_state.resultados = None
    if "pdf_bytes" not in st.session_state:
        st.session_state.pdf_bytes = None
    if "codigo_gerado" not in st.session_state:
        st.session_state.codigo_gerado = ""

    # --- Sidebar ---
    with st.sidebar:
        st.markdown('<div class="sidebar-card"><h3>‚öôÔ∏è Painel de Controle</h3></div>', unsafe_allow_html=True)
        
        consultas_restantes = CONFIG['MAX_CONSULTAS_SESSAO'] - st.session_state.consultas
        limit_class = "limit-reached" if consultas_restantes <= 0 else ""
        st.markdown(f"""
            <div class="sidebar-card">
                <div class="usage-counter {limit_class}">
                    <h4>Consultas na Sess√£o</h4>
                    <h2>{st.session_state.consultas} / {CONFIG['MAX_CONSULTAS_SESSAO']}</h2>
                </div>
            </div>
        """, unsafe_allow_html=True)

        st.markdown("---")
        pix_key = "pesas8810@gmail.com"
        img_qr = qrcode.make(f"pix:{pix_key}")
        buf = BytesIO()
        img_qr.save(buf, format="PNG")
        st.image(buf.getvalue(), caption="üíö Apoie o Projeto com um Pix", width=150)
        st.info(f"**Chave Pix:** `{pix_key}`")

    # --- Layout Principal ---
    st.markdown('<div class="hero-header"><h1>‚ú® PlagIA Professional</h1><p>An√°lise de Similaridade de Documentos com IA</p></div>', unsafe_allow_html=True)

    col1, col2 = st.columns([0.6, 0.4])

    with col1:
        st.markdown('<div class="glass-card">', unsafe_allow_html=True)
        st.markdown('<p class="section-header">1. Preencha seus dados e envie o documento</p>', unsafe_allow_html=True)
        
        nome = st.text_input("Seu Nome Completo", placeholder="Ex: Ana da Silva")
        email = st.text_input("Seu E-mail", placeholder="Ex: ana.silva@email.com")
        arquivo_pdf = st.file_uploader("Selecione o artigo em formato PDF", type=["pdf"])
        
        st.markdown("</div>", unsafe_allow_html=True)

    with col2:
        st.markdown('<div class="glass-card" style="height: 100%;">', unsafe_allow_html=True)
        st.markdown('<p class="section-header">‚ÑπÔ∏è Informa√ß√µes</p>', unsafe_allow_html=True)
        st.info(f"""
        - **M√≠nimo:** {CONFIG['MIN_WORDS']} palavras e {CONFIG['MIN_TEXT_LENGTH']} caracteres.
        - **Formato:** PDF com texto selecion√°vel.
        - **An√°lise:** Compara o texto com bases de dados acad√™micas globais.
        """)
        
        analisar_btn = st.button("üöÄ Iniciar An√°lise do Documento", disabled=(consultas_restantes <= 0 or st.session_state.processando))
        st.markdown("</div>", unsafe_allow_html=True)

    # --- L√≥gica de Processamento ---
    if analisar_btn:
        if not nome or not email or not arquivo_pdf:
            st.error("‚ö†Ô∏è Por favor, preencha todos os campos e envie um arquivo PDF.")
        elif consultas_restantes <= 0:
            st.error("‚ùå Voc√™ atingiu o limite de consultas para esta sess√£o.")
        else:
            st.session_state.processando = True
            st.session_state.resultados = None
            st.session_state.pdf_bytes = None
            st.rerun()

    if st.session_state.processando:
        status_placeholder = st.empty()
        with st.spinner("Analisando seu documento..."):
            status_placeholder.info("Passo 1/5: Extraindo texto do PDF...")
            texto_bruto = extrair_texto_pdf(arquivo_pdf)
            valido, msg = validar_texto(texto_bruto)
            if not valido:
                st.error(f"‚ùå Erro na valida√ß√£o do PDF: {msg}")
                st.session_state.processando = False
                st.rerun()

            status_placeholder.info("Passo 2/5: Limpando e preparando o texto...")
            texto_limpo = limpar_texto(texto_bruto)
            valido, msg = validar_texto(texto_limpo)
            if not valido:
                st.error(f"‚ùå Erro ap√≥s limpeza do texto: {msg}")
                st.session_state.processando = False
                st.rerun()

            status_placeholder.info("Passo 3/5: Iniciando busca robusta de refer√™ncias...")
            referencias = buscar_referencias_robusto(texto_limpo, status_placeholder)
            
            if not referencias:
                st.warning("‚ö†Ô∏è Nenhuma refer√™ncia correspondente encontrada, mesmo ap√≥s busca extensiva. O documento pode ser altamente original ou tratar de um t√≥pico n√£o indexado nas bases de dados consultadas.")
                st.session_state.processando = False
                st.session_state.consultas += 1
                st.rerun()

            status_placeholder.info(f"Passo 4/5: Calculando similaridade com {len(referencias)} refer√™ncias...")
            resultados_finais = []
            for ref in referencias[:CONFIG['MAX_REFS_ANALISE']]:
                texto_base = f"{ref.get('titulo', '')} {ref.get('resumo', '')}"
                sim = calcular_similaridade(texto_limpo, texto_base)
                if sim > 0.05: # Filtro de similaridade m√≠nima
                    resultados_finais.append((ref.get('titulo', ''), sim, ref.get('link', ''), ref.get('doi', ''), ref.get('ano', '')))
            
            resultados_finais.sort(key=lambda x: x[1], reverse=True)
            st.session_state.resultados = resultados_finais

            status_placeholder.info("Passo 5/5: Gerando relat√≥rio final...")
            # st.session_state.codigo_gerado = gerar_codigo_verificacao(texto_limpo)
            # salvar_registro_google_sheets(nome, email, st.session_state.codigo_gerado)
            # st.session_state.pdf_bytes = gerar_relatorio_pdf(resultados_finais, nome, email, st.session_state.codigo_gerado)
            
            st.session_state.consultas += 1
            st.session_state.processando = False
            gc.collect()
            st.success("An√°lise conclu√≠da!")
            time.sleep(1)
            st.rerun()

    # --- Exibi√ß√£o dos Resultados ---
    if st.session_state.resultados is not None:
        st.success(f"‚úÖ An√°lise conclu√≠da com sucesso!")
        # (O c√≥digo para exibir o dashboard e o bot√£o de download vai aqui, se necess√°rio)
        # exibir_dashboard_resultados(st.session_state.resultados)
        # if st.session_state.pdf_bytes:
        #     st.download_button(...)

if __name__ == "__main__":
    # Adicionei as fun√ß√µes que faltavam para o c√≥digo ser autocontido
    # Voc√™ pode precisar ajustar a l√≥gica delas conforme sua necessidade
    def gerar_codigo_verificacao(texto: str) -> str:
        return hashlib.md5(texto.encode()).hexdigest()[:10].upper()

    def salvar_registro_google_sheets(nome: str, email: str, codigo: str):
        logger.info(f"Simulando salvamento: {nome}, {email}, {codigo}")
        return True

    def gerar_relatorio_pdf(resultados: List, nome: str, email: str, codigo: str) -> Optional[bytes]:
        logger.info("Simulando gera√ß√£o de PDF.")
        try:
            pdf = FPDF()
            pdf.add_page()
            pdf.set_font("Arial", size=12)
            pdf.cell(200, 10, txt="Relat√≥rio Simulado", ln=True, align='C')
            return pdf.output(dest='S').encode('latin-1')
        except Exception as e:
            logger.error(f"Erro na simula√ß√£o de PDF: {e}")
            return None
            
    def exibir_dashboard_resultados(resultados: List):
        st.markdown('<p class="section-header">üìä Dashboard de Resultados</p>', unsafe_allow_html=True)
        if not resultados:
            st.warning("Nenhum resultado para exibir.")
            return
        # ... (a l√≥gica completa do dashboard iria aqui)
        st.write(f"Top resultado: '{resultados[0][0][:50]}...' com similaridade de {resultados[0][1]*100:.1f}%")


    main()
